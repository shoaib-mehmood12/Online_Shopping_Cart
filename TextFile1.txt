1. TempData: this is the temporary storage that is use to display the data only once when our request complete the data will dispose automatically.
2. ViewBag : move the data form the action(Controller--> action(index)-->viewBag this view bag is only Useable by the index view of the HomeControlelr) to view and view to layout page,but there is conditoin that it will works inside the same controller.
             action -> view && view-> layout Page 
             --->> it works in the same action's view means action is index so works in index
             --->>it is the base class of the controller class
    *-->>>>In ASP.NET MVC, ViewData is similar to ViewBag, which transfers data from Controller to View. ViewData is of Dictionary type, whereas ViewBag is of dynamic type. However, both store data in the same dictionary internally. ViewData is a dictionary, so it contains key-value pairs where each key must be a string.
    --->>>>The ViewBag in ASP.NET MVC is used to transfer temporary data (which is not included in the model) from the controller to the view.
    2.1-> introduced in (.net4.5)a dynamic type checking the type at the runtime instead of the compile time. 
3. Any() is Nullable boolean
4. ?? means that if the model is null then it's left side data and if not null then right side data // ref: used in the product model line#
5.Directory.CreateDirectory(directryPath); ---> create the directory if not exists.
6. ctrl+rr ----> this is use to change at one place will occur at the all other places where the same name or word used
7. include only the navigation properties(list,objects) not the primitive dataTypes   
8. View Model:
            -> this is a concept in this we use select instead of include to get the specific coloums.
            -> the product view model will not be added in the data base.

9. The "ModelState" property of a controller represents the submitted values, and validation errors in those values if such errors exist, during a POST action
        ->basically this modelstate property is the check for the model.

10. The c# code run on the Server and the js Code is run on browser.
11. if you want give the data from the server/database/or from any other source to Java-Script so there we need te Json because Json is understand by Both Js and c#
12. In controller we add add the AppDbContext by using the constructor but in views we will not use the constructor so at that point we inject the database into the views
13. Roles:
    admin--->> do every kind of work related to application
    moderator--->>have minimum amounts of permission alloted to him.
    client-->> who purchase the material from us. 

14. things that are injected in the Dependency injeciton are of three types:
        singleton: Object only created once when the application created.
        Scope: Object created on Request  and used when required . I give the key to my brother and then i will give the lockers key to my brother and then tell him to give me back after use.   
        transient: create new object on every request.e.g. if we have locker and we not allow the locker to open any one so we apply condition there we open the locker under our vision.(sir pe kharhy ho k) 
15. in single request the loggedin User checked again and again.
16. database ki service scoped use hoti ha Objet will dispose when the request get Back.
17. On server side when request will again send so how server know that who user is this? -->>> By maintaing the Id in the server-side and on client side we are showing this id also.
18. when user Login then we end the cookie so that we will save in the inspect/storage/cokkie/value, so When user will user sends request to us then automatically we ae recieving this cookie on serverside.
    -->>> if the request is from android so at this moment we will not store the data in the cookie we will store the data in the local storage of the phone(on cookie we only store the token in case of Mobile).
19. select() always use when you are getting the model and in that model you want to add or remove the items .
     